plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'kotlin-kapt'
}
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

android {

    /**
     * 资源同名问题处理
     * 每个子模块给资源名添加前缀，具体做法是在每个子模块的build.gradle文件的android块内添加一行代码：resourcePrefix “资源名前缀”：
     */
    compileSdk Android.compileSdkVersion
    ndkVersion "22.1.7171670"

    defaultConfig {
        minSdk Android.minSdkVersion
        targetSdk Android.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters "armeabi", "armeabi-v7a", 'x86'
        }

        renderscriptTargetApi 25
        renderscriptSupportModeEnabled true    // Enable RS support
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        useIR = true
        jvmTarget = JavaVersion.VERSION_11
        freeCompilerArgs += ["-Xskip-prerelease-check"]
    }

    afterEvaluate {
        publishing {
            // 当前版本依赖库版本号，这个jitpack不会使用到，只是我们开发者自己查看
            // def versionName = "1.0"
            publications {
                // Creates a Maven publication called "release".
                release(MavenPublication) {
                    // Applies the component for the release build variant.
                    from components.release // 表示发布 release（jitpack 都不会使用到）

                    // You can then customize attributes of the publication as shown below.
                    groupId = 'com.github.R-Gang' // 这个是依赖库的组 id
                    artifactId = 'Android-Common' // 依赖库的名称（jitpack 都不会使用到）
                    version = Android.versionName
                }
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildFeatures {
        dataBinding = true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Support.appcompat
    implementation Dependencies.androidx_multidex

    implementation Dependencies.anko_commons
    implementation Dependencies.anko_sdk25
    implementation Dependencies.anko_sdk25_coroutines

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'

    //EventBus解耦
    implementation 'org.greenrobot:eventbus:3.2.0'

    //日志工具类 logger
    implementation 'com.orhanobut:logger:2.2.0'

    // 沉浸式状态栏
    implementation 'com.jaeger.statusbarutil:library:1.5.1'

    // x5 tbs
    implementation 'com.tencent.tbs:tbssdk:44085'

    // 实用工具类
    implementation Dependencies.toolsUtils

}


// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/**
 * 点击 studio 右侧 Gradle 中的 lib-module 的 publishReleasePublicationToMavenLocal
 * 或执行命令 ./gradlew publishReleasePublicationToMavenLocal，
 * 执行成功就可以准备发布了。
 */
// 打包源码
task androidSourcesJar(type: Jar) {
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        from android.sourceSets.main.java.sourceFiles
    } else {
        println project
        from sourceSets.main.allSource
    }
    classifier 'sources'
}

// 导出jar包
task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/rgang-android-common.jar'
    //设置拷贝的文件
    from('build/intermediates/aar_main_jar/release/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename('classes.jar', 'rgang-android-common.jar')
}
makeJar.dependsOn(build)